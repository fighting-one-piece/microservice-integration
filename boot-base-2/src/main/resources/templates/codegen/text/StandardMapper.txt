<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.platform.modules.[(${module})].dao.[(${entity})]DAO">

	<resultMap type="[(${entity})]" id="[(${#strings.toLowerCase(#strings.substring(entity,0,1))})][(${#strings.substring(entity,1,#strings.length(entity))})]ResultMap">
		<id property="id" column="ID"></id>[# th:each="key : ${attriColumn.keySet()}"]
		<result property="[(${key})]" column="[(${attriColumn.get(key)})]" />[/][# th:each="key : ${attriStringColumn.keySet()}"]
		<result property="[(${key})]" column="[(${attriStringColumn.get(key)})]" />[/]
	</resultMap>
	
	<sql id="columnClause">
		ID,[(${column})]
	</sql>
	
	<sql id="whereQClause">
		<where>
			<if test="condition.id != null ">
				ID = #{condition.id}
			</if>[# th:each="key : ${attriColumn.keySet()}"]
			<if test="condition.[(${key})] != null">
				AND [(${attriColumn.get(key)})] = #{condition.[(${key})]}
			</if>[/][# th:each="key : ${attriStringColumn.keySet()}"]
			<if test="condition.[(${key})] != null and condition.[(${key})] != ''">
				AND [(${attriStringColumn.get(key)})] = #{condition.[(${key})]}
			</if>[/]
		</where>
	</sql>
	
	<sql id="whereMClause">
		<where>
			<if test="id != null ">
				ID = #{id}
			</if>[# th:each="key : ${attriColumn.keySet()}"]
			<if test="[(${key})] != null">
				AND [(${attriColumn.get(key)})] = #{[(${key})]}
			</if>[/][# th:each="key : ${attriStringColumn.keySet()}"]
			<if test="[(${key})] != null and [(${key})] != ''">
				AND [(${attriStringColumn.get(key)})] = #{[(${key})]}
			</if>[/]
		</where>
	</sql>
	
	<insert id="insert" keyProperty="id" parameterType="[(${entity})]">
		INSERT INTO [(${table})]([(${column})]) 
		VALUES([(${attri})])
	</insert>

	<update id="update" parameterType="[(${entity})]">
		UPDATE [(${table})]
		<set>[# th:each="key : ${attriColumn.keySet()}"]
			<if test="[(${key})] != null">
				[(${attriColumn.get(key)})] = #{[(${key})]},
			</if>[/][# th:each="key : ${attriStringColumn.keySet()}"]
			<if test="[(${key})] != null and [(${key})] != ''">
				[(${attriStringColumn.get(key)})] = #{[(${key})]},
			</if>[/]
		</set>
		<where>
			<if test="id != null ">
				ID = #{id}
			</if>
		</where>
	</update>
	
	<delete id="deleteByPK" parameterType="Long">
		DELETE FROM [(${table})] WHERE ID = #{id}
	</delete>
	
	<delete id="delete" parameterType="[(${entity})]">
		DELETE FROM [(${table})] <include refid="whereMClause" />
	</delete>
	
	<select id="readDataByPK" resultMap="[(${#strings.toLowerCase(#strings.substring(entity,0,1))})][(${#strings.substring(entity,1,#strings.length(entity))})]ResultMap">
		SELECT <include refid="columnClause" />
		FROM [(${table})] WHERE ID = #{id}
	</select>

	<select id="readDataByCondition" resultMap="[(${#strings.toLowerCase(#strings.substring(entity,0,1))})][(${#strings.substring(entity,1,#strings.length(entity))})]ResultMap">
		SELECT <include refid="columnClause" />
		FROM [(${table})]
		<include refid="whereQClause" />
	</select>
	
	<select id="readDataListByCondition" resultMap="[(${#strings.toLowerCase(#strings.substring(entity,0,1))})][(${#strings.substring(entity,1,#strings.length(entity))})]ResultMap">
		SELECT <include refid="columnClause" />
		FROM [(${table})]
		<include refid="whereQClause" />
	</select>
	
	<select id="readDataPaginationByCondition" resultMap="[(${#strings.toLowerCase(#strings.substring(entity,0,1))})][(${#strings.substring(entity,1,#strings.length(entity))})]ResultMap">
		SELECT <include refid="columnClause" />
		FROM [(${table})]
		<include refid="whereMClause" />
	</select>
	
</mapper>